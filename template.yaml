AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for sam-sagemaker.
  Switch AliasName and EndpointName/CoolDownEndpointName to deploy.
Parameters:
  CommitId:
    Type : String
    Description: The commit id associated with the endpoint
  EndpointName:
    Type: String
    Default: regression-f99cfed04e0a11ea9df4b9cadb69d33b
    Description: The name of the endpoint to switch to
  EndpointVariant:
    Description: Name of the SageMaker variant
    Default: 'AllTraffic'
    Type: String
  CoolDownCapacity:
    Default: '0'
    Description: Cooldown instance capacity
    Type: Number  
  AutoScalingMinCapacity:
    Default: '0'
    Description: Minimum number of instances for endpoint
    Type: Number
  AutoScalingMaxCapacity:
    Default: '3'
    Description: Maximum number of instances for endpoint
    Type: Number
  AutoScalingCoolDownPeriod:
    Default: '600'
    Description: The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start
    Type: Number
  AutoScalingInvocationsPerInstance:
    Default: '100'
    Description: The average number of times per minute that each instance for a variant is invoked
    Type: Number

Conditions:
  CreateAutoScaling: !Not [!Equals [!Ref AutoScalingMaxCapacity, '1']]

# Attempt to add canary deployments
# https://aws.amazon.com/blogs/compute/implementing-canary-deployments-of-aws-lambda-functions-with-alias-traffic-shifting/

# But Code deploy doesn't allways trigger for lambda env change so could just add SFN
# https://github.com/aws-samples/aws-lambda-deploy
# See also: https://aws.amazon.com/blogs/compute/implementing-canary-deployments-of-aws-lambda-functions-with-alias-traffic-shifting/

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  DeploymentCompleteTopic:
    Type: AWS::SNS::Topic
        
  RegressionFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub '${AWS::StackName}_RegressionFunction'
      CodeUri: regression/
      Handler: app.lambda_handler
      Runtime: python3.7
      Role: !GetAtt RegressionFunctionRole.Arn
      AutoPublishAlias: "live"
      DeploymentPreference:
        Type: Canary10Percent5Minutes #AllAtOnce
        Alarms:
          # A list of alarms that you want to monitor
          - !Ref AliasErrorMetricGreaterThanZeroAlarm
          - !Ref LatestVersionErrorMetricGreaterThanZeroAlarm
        Hooks:
          # Validation Lambda functions that are run before & after traffic shifting
          PreTraffic: !Ref PreTrafficLambdaFunction
          PostTraffic: !Ref PostTrafficLambdaFunction
        TriggerConfigurations:
          - TriggerEvents:
              - DeploymentSuccess
              - DeploymentFailure
            TriggerName: DeploymentCompleteTrigger
            TriggerTargetArn: !Ref DeploymentCompleteTopic          
      Environment:
        Variables:
          COMMIT_ID: !Ref CommitId
          ENDPOINT_NAME: !Ref EndpointName
          VARIANT_NAME: !Ref EndpointVariant
      Events:
        Invoke:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /regression
            Method: post

  RegressionFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'        
      Policies:
        - PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sagemaker:InvokeEndpoint
                Resource: 
                  "arn:aws:sagemaker:*:*:endpoint/*" 
            Version: '2012-10-17'
          PolicyName: SageMakerInvokeEndpoint
  
  PreTrafficLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CodeDeployHook_${AWS::StackName}_PreTrafficLambdaFunction' # HACK 
      CodeUri: regression/
      Handler: pre_traffic_hook.lambda_handler
      Runtime: python3.7
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - lambda:GetFunction
              Resource: 
                "arn:aws:sagemaker:*:*:endpoint/*"
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - lambda:GetFunction
              Resource: !GetAtt RegressionFunctionRole.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - codedeploy:PutLifecycleEventHookExecutionStatus
              Resource:
                !Sub 'arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${ServerlessDeploymentApplication}/*'
      DeploymentPreference:
        Enabled: False
      Environment:
        Variables:
          FUNCTION_NAME: !Ref RegressionFunction
          FUNCTION_VERSION: !GetAtt RegressionFunction.Version.Version
          ENDPOINT_NAME: !Ref EndpointName
          VARIANT_NAME: !Ref EndpointVariant

  PostTrafficLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CodeDeployHook_${AWS::StackName}_PostTrafficLambdaFunction' # HACK 
      CodeUri: regression/
      Handler: post_traffic_hook.lambda_handler
      Runtime: python3.7
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - sagemaker:DeleteEndpoint
                - sagemaker:DeleteEndpointConfig
                - sagemaker:DescribeEndpoint
                - sagemaker:UpdateEndpointWeightsAndCapacities
              Resource: 
                "arn:aws:sagemaker:*:*:endpoint/*"
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - lambda:GetFunction
              Resource: !GetAtt RegressionFunctionRole.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - codedeploy:PutLifecycleEventHookExecutionStatus
              Resource:
                !Sub 'arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${ServerlessDeploymentApplication}/*'
      DeploymentPreference:
        Enabled: False
      Environment:
        Variables:
          FUNCTION_NAME: !Ref RegressionFunction
          FUNCTION_VERSION: !GetAtt RegressionFunction.Version.Version
          INSTANCE_COUNT: !Ref CoolDownCapacity

  AliasErrorMetricGreaterThanZeroAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: Lambda Function Error > 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Resource
          Value: !Sub "${RegressionFunction}:live"
        - Name: FunctionName
          Value: !Ref RegressionFunction
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0

  LatestVersionErrorMetricGreaterThanZeroAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: Lambda Function Error > 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Resource
          Value: !Sub "${RegressionFunction}:live"
        - Name: FunctionName
          Value: !Ref RegressionFunction
        - Name: ExecutedVersion
          Value: !GetAtt RegressionFunction.Version.Version
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0
            
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: CreateAutoScaling
    Properties: 
      MinCapacity: !Ref AutoScalingMinCapacity
      MaxCapacity: !Ref AutoScalingMaxCapacity
      ResourceId: !Sub endpoint/${EndpointName}/variant/${EndpointVariant}
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: sagemaker:variant:DesiredInstanceCount
      ServiceNamespace: sagemaker

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Condition: CreateAutoScaling
    DependsOn: AutoScalingTarget
    Properties: 
      PolicyName: !Sub SageMaker-${EndpointName}
      PolicyType: TargetTrackingScaling
      ResourceId: !Sub endpoint/${EndpointName}/variant/${EndpointVariant}
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration: 
        PredefinedMetricSpecification: 
          PredefinedMetricType: SageMakerVariantInvocationsPerInstance
        ScaleInCooldown: !Ref AutoScalingCoolDownPeriod
        ScaleOutCooldown: !Ref AutoScalingCoolDownPeriod
        TargetValue: !Ref AutoScalingInvocationsPerInstance

  AutoScalingRole: 
    Type: AWS::IAM::Role
    Condition: CreateAutoScaling
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "AutoscalingPolicySagemaker"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "sagemaker:DescribeEndpoint"
                  - "sagemaker:DescribeEndpointConfig"
                  - "sagemaker:UpdateEndpointWeightsAndCapacities"
                Resource: "arn:aws:sagemaker:*:*:endpoint/*"
              -
                Effect: "Allow"
                Action:
                  - "application-autoscaling:*"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:DeleteAlarms"
                Resource: "*"
              -
                Effect: "Allow"
                Action: iam:CreateServiceLinkedRole
                Resource: "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint"
                Condition: 
                  StringLike: 
                    iam:AWSServiceName: sagemaker.application-autoscaling.amazonaws.com 
        
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  RegressionApi:
    Description: "API Gateway endpoint URL for Prod stage for Regression function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/regression/"
  RegressionFunction:
    Description: "Regression Lambda Function ARN"
    Value: !GetAtt RegressionFunction.Arn
  RegressionFunctionRoleIamRole:
    Description: "Explicit IAM Role created for Regression function"
    Value: !GetAtt RegressionFunctionRole.Arn
  RegressionDeploymentApplication:
    Description: "The deployment application for "
    Value: !Ref ServerlessDeploymentApplication
  